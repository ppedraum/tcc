{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    fetch('http://localhost:3001/cad').then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setData(result);\n      setLoading(false);\n    }).catch(function (err) {\n      return alert(err);\n    });\n  });\n\n  function getContent() {\n    if (isLoading) return _jsx(ActivityIndicator, {\n      size: \"large\"\n    });else {\n      return _jsxs(_Fragment, {\n        children: [_jsxs(Text, {\n          children: [\"Nome: \", data.content.nome]\n        }), _jsxs(Text, {\n          children: [\"Idade: \", data.content.idade]\n        }), _jsxs(Text, {\n          children: [\"Cidade: \", data.content.cidade]\n        }), _jsxs(Text, {\n          children: [\"Estado: \", data.content.uf]\n        }), _jsxs(Text, {\n          children: [\"Cursando: \", data.content.cursando]\n        })]\n      });\n    }\n  }\n\n  return _jsx(View, {\n    style: styles.container,\n    children: getContent()\n  });\n}\n\nexport default App;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","useEffect","useState","App","isLoading","setLoading","data","setData","fetch","then","res","json","result","catch","err","alert","getContent","content","nome","idade","cidade","uf","cursando","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/expo react/node_mais_reactnative/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator } from 'react-native';\n\nfunction App() {\n\n    /*\n    useStates para o loading do app e os dados do arquivo json.\n    o loading serve apenas para indicar ao usuário que algo está carregando, nesse caso,\n    a requisição do app para pegar o conteúdo do servidor localhost:3001 na rota /cad\n    */\n    const [isLoading, setLoading] = useState(true);\n    const [data, setData] = useState([]);\n\n    //useEffect para carregar o arquivo apenas uma vez.\n    useEffect(()=> {\n        //um fetch para pegar os dados e o tratamento dele transformando em um objeto\n        //js e depois salvando na var data\n        //também seta o carregamento para false\n        //Se houver erro manda por alert e não mostra os dados\n        fetch('http://localhost:3001/cad')\n        .then(res => res.json())\n        .then(result => {\n            setData(result);\n            setLoading(false);\n        })\n        .catch(err => alert(err))\n    });\n\n    function getContent(){\n        if(isLoading) return <ActivityIndicator size=\"large\"/>\n        else {\n            return(\n                <>\n                <Text>Nome: {data.content.nome}</Text>\n                <Text>Idade: {data.content.idade}</Text>\n                <Text>Cidade: {data.content.cidade}</Text>\n                <Text>Estado: {data.content.uf}</Text>\n                <Text>Cursando: {data.content.cursando}</Text>\n                </>\n            );\n        }\n    }\n\n    return(\n        <View style={styles.container}>\n            {getContent()}\n        </View>\n    )\n\n\n}\n\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;;;;;;AAGA,SAASC,GAAT,GAAe;EAOX,gBAAgCD,QAAQ,CAAC,IAAD,CAAxC;EAAA;EAAA,IAAOE,SAAP;EAAA,IAAkBC,UAAlB;;EACA,iBAAwBH,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOI,IAAP;EAAA,IAAaC,OAAb;;EAGAN,SAAS,CAAC,YAAK;IAKXO,KAAK,CAAC,2BAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,IAAJ,EAAJ;IAAA,CADT,EAECF,IAFD,CAEM,UAAAG,MAAM,EAAI;MACZL,OAAO,CAACK,MAAD,CAAP;MACAP,UAAU,CAAC,KAAD,CAAV;IACH,CALD,EAMCQ,KAND,CAMO,UAAAC,GAAG;MAAA,OAAIC,KAAK,CAACD,GAAD,CAAT;IAAA,CANV;EAOH,CAZQ,CAAT;;EAcA,SAASE,UAAT,GAAqB;IACjB,IAAGZ,SAAH,EAAc,OAAO,KAAC,iBAAD;MAAmB,IAAI,EAAC;IAAxB,EAAP,CAAd,KACK;MACD,OACI;QAAA,WACA,MAAC,IAAD;UAAA,qBAAaE,IAAI,CAACW,OAAL,CAAaC,IAA1B;QAAA,EADA,EAEA,MAAC,IAAD;UAAA,sBAAcZ,IAAI,CAACW,OAAL,CAAaE,KAA3B;QAAA,EAFA,EAGA,MAAC,IAAD;UAAA,uBAAeb,IAAI,CAACW,OAAL,CAAaG,MAA5B;QAAA,EAHA,EAIA,MAAC,IAAD;UAAA,uBAAed,IAAI,CAACW,OAAL,CAAaI,EAA5B;QAAA,EAJA,EAKA,MAAC,IAAD;UAAA,yBAAiBf,IAAI,CAACW,OAAL,CAAaK,QAA9B;QAAA,EALA;MAAA,EADJ;IASH;EACJ;;EAED,OACI,KAAC,IAAD;IAAM,KAAK,EAAEC,MAAM,CAACC,SAApB;IAAA,UACKR,UAAU;EADf,EADJ;AAOH;;AAED,eAAeb,GAAf;AAEA,IAAMoB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE,CADG;IAETC,eAAe,EAAE,MAFR;IAGTC,UAAU,EAAE,QAHH;IAITC,cAAc,EAAE;EAJP;AADoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}