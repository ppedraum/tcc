{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createContext, useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext({\n  isSigned: false,\n  usuario: {},\n  login: function login() {},\n  logout: function logout() {}\n});\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  useEffect(function () {\n    function getStoragedData() {\n      var storagedUsuario, storagedToken;\n      return _regeneratorRuntime.async(function getStoragedData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@RNAuth:usuario'));\n\n            case 2:\n              storagedUsuario = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('@RNAuth:token'));\n\n            case 5:\n              storagedToken = _context.sent;\n              setUsuario(storagedUsuario);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, []);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSigned = _useState2[0],\n      setSigned = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      usuario = _useState4[0],\n      setUsuario = _useState4[1];\n\n  function login(email, senha) {\n    fetch('http://localhost:3001/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        e_mail: email,\n        senha: senha\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      if (result.error != null) {\n        console.log('O usuário não foi encontrado!');\n      } else {\n        setSigned(true);\n        setUsuario(result.usuario);\n        AsyncStorage.setItem('@RNAuth:usuario', JSON.stringify(result.usuario));\n        AsyncStorage.setItem('@RNAuth:token', result.token);\n      }\n    });\n  }\n\n  function logout() {\n    setSigned(false);\n    setUsuario(null);\n  }\n\n  return _jsx(AuthContext.Provider, {\n    value: {\n      isSigned: isSigned,\n      usuario: usuario,\n      login: login,\n      logout: logout\n    },\n    children: children\n  });\n}\nexport default AuthContext;","map":{"version":3,"names":["createContext","useState","useEffect","AsyncStorage","AuthContext","isSigned","usuario","login","logout","AuthProvider","children","getStoragedData","getItem","storagedUsuario","storagedToken","setUsuario","setSigned","email","senha","fetch","method","headers","body","JSON","stringify","e_mail","then","res","json","result","error","console","log","setItem","token"],"sources":["C:/expo react/mundo/src/contexts/auth.js"],"sourcesContent":["//Nosso contexto para a autenticação\r\n/*\r\nO context basicamente serve para gravar informações necessárias para vários componentes,\r\ncomo tokens de autenticação.\r\n\r\nPodemos então envolver a parte que queremos que tenha essas informações com o Context.Provider,\r\nonde todos os componentes herdam-nas.\r\n*/\r\n\r\n\r\nimport { createContext, useState, useEffect } from 'react';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n//criando o contexto e dizendo qual o formato dele (atributos que vão ser passados para ele)\r\n//O que é passado na função não é o valor default, mas sim o formato dos atributos dela.\r\n//Bom para que o react entenda quais são os attrs\r\nconst AuthContext = createContext({\r\n    isSigned:false, \r\n    usuario:{}, \r\n    login:()=>{},\r\n    logout:()=>{}\r\n});\r\n\r\n\r\n/*\r\nProvider -> Provê as informações daquele contexto\r\nExportamos o Provider com o parâmetro children, que recebe pelo react todos os componentes\r\nque vão estar dentro desse componente, e assim repassamos normalmente os valores para lá\r\n*/\r\nexport function AuthProvider({children}){\r\n\r\n    useEffect(()=>{\r\n        async function getStoragedData(){\r\n            const storagedUsuario = await AsyncStorage.getItem('@RNAuth:usuario');\r\n            const storagedToken = await AsyncStorage.getItem('@RNAuth:token');\r\n            \r\n            setUsuario(storagedUsuario);\r\n        }\r\n    }, [])\r\n\r\n    const [isSigned, setSigned] = useState(false)\r\n    const [usuario, setUsuario] = useState(null);\r\n\r\n    /*\r\n    Movemos a responsabilidade do login para o contexto, para assim \r\n    mandá-lo pelo AuthProvider\r\n    */\r\n    function login(email, senha){\r\n        fetch('http://localhost:3001/auth/login', {\r\n            method: 'POST',\r\n            headers: { \r\n                'Content-Type':'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                e_mail: email,\r\n                senha: senha\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result=>{\r\n            if(result.error != null){\r\n                console.log('O usuário não foi encontrado!');\r\n            }else{\r\n                setSigned(true);\r\n                setUsuario(result.usuario);\r\n                AsyncStorage.setItem('@RNAuth:usuario', JSON.stringify(result.usuario));\r\n                AsyncStorage.setItem('@RNAuth:token', result.token);\r\n            }\r\n        });\r\n    \r\n    }\r\n\r\n    /*\r\n    O logout apenas troca o isSigned de true pra false e o usuário fica nulo, assim no nosso componente\r\n    index.routes.js, como isSigned é false, troca da rota do App para a rota de Autenticação\r\n    */\r\n\r\n    function logout(){\r\n        setSigned(false);\r\n        setUsuario(null);\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{isSigned, usuario, login, logout}} >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContext;"],"mappings":";;AAUA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,YAAP,MAAyB,2CAAzB;;AAKA,IAAMC,WAAW,GAAGJ,aAAa,CAAC;EAC9BK,QAAQ,EAAC,KADqB;EAE9BC,OAAO,EAAC,EAFsB;EAG9BC,KAAK,EAAC,iBAAI,CAAE,CAHkB;EAI9BC,MAAM,EAAC,kBAAI,CAAE;AAJiB,CAAD,CAAjC;AAaA,OAAO,SAASC,YAAT,OAAiC;EAAA,IAAVC,QAAU,QAAVA,QAAU;EAEpCR,SAAS,CAAC,YAAI;IACV,SAAeS,eAAf;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACkCR,YAAY,CAACS,OAAb,CAAqB,iBAArB,CADlC;;YAAA;cACUC,eADV;cAAA;cAAA,iCAEgCV,YAAY,CAACS,OAAb,CAAqB,eAArB,CAFhC;;YAAA;cAEUE,aAFV;cAIIC,UAAU,CAACF,eAAD,CAAV;;YAJJ;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAMH,CAPQ,EAON,EAPM,CAAT;;EASA,gBAA8BZ,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOI,QAAP;EAAA,IAAiBW,SAAjB;;EACA,iBAA8Bf,QAAQ,CAAC,IAAD,CAAtC;EAAA;EAAA,IAAOK,OAAP;EAAA,IAAgBS,UAAhB;;EAMA,SAASR,KAAT,CAAeU,KAAf,EAAsBC,KAAtB,EAA4B;IACxBC,KAAK,CAAC,kCAAD,EAAqC;MACtCC,MAAM,EAAE,MAD8B;MAEtCC,OAAO,EAAE;QACL,gBAAe;MADV,CAF6B;MAKtCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;QACjBC,MAAM,EAAER,KADS;QAEjBC,KAAK,EAAEA;MAFU,CAAf;IALgC,CAArC,CAAL,CAUCQ,IAVD,CAUM,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,IAAJ,EAAJ;IAAA,CAVT,EAWCF,IAXD,CAWM,UAAAG,MAAM,EAAE;MACV,IAAGA,MAAM,CAACC,KAAP,IAAgB,IAAnB,EAAwB;QACpBC,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACH,CAFD,MAEK;QACDhB,SAAS,CAAC,IAAD,CAAT;QACAD,UAAU,CAACc,MAAM,CAACvB,OAAR,CAAV;QACAH,YAAY,CAAC8B,OAAb,CAAqB,iBAArB,EAAwCV,IAAI,CAACC,SAAL,CAAeK,MAAM,CAACvB,OAAtB,CAAxC;QACAH,YAAY,CAAC8B,OAAb,CAAqB,eAArB,EAAsCJ,MAAM,CAACK,KAA7C;MACH;IACJ,CApBD;EAsBH;;EAOD,SAAS1B,MAAT,GAAiB;IACbQ,SAAS,CAAC,KAAD,CAAT;IACAD,UAAU,CAAC,IAAD,CAAV;EACH;;EAED,OACI,KAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAACV,QAAQ,EAARA,QAAD;MAAWC,OAAO,EAAPA,OAAX;MAAoBC,KAAK,EAALA,KAApB;MAA2BC,MAAM,EAANA;IAA3B,CAA7B;IAAA,UACKE;EADL,EADJ;AAKH;AAED,eAAeN,WAAf"},"metadata":{},"sourceType":"module"}