{"ast":null,"code":"import { createContext } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthContext = createContext({\n  signed: true,\n  token: '',\n  user: {}\n});\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  return _jsx(AuthContext.Provider, {\n    value: {\n      signed: true,\n      token: '',\n      user: {}\n    },\n    children: children\n  });\n}\nexport default AuthContext;","map":{"version":3,"names":["createContext","AuthContext","signed","token","user","AuthProvider","children"],"sources":["C:/expo react/mundo/src/contexts/auth.js"],"sourcesContent":["//Nosso contexto para a autenticação\r\n/*\r\nO context basicamente serve para gravar informações necessárias para vários componentes,\r\ncomo tokens de autenticação.\r\n\r\nPodemos então envolver a parte que queremos que tenha essas informações com o Context.Provider,\r\nonde todos os componentes herdam-nas.\r\n*/\r\n\r\nimport { createContext } from 'react';\r\n\r\n//criando o contexto e dizendo qual o formato dele (atributos que vão ser passados para ele)\r\n//O que é passado na função não é o valor default, mas sim o formato dos atributos dela.\r\nconst AuthContext = createContext({signed:true, token:'', user:{}});\r\n\r\n/*\r\nExportamos o Provider com o parâmetro children, que recebe pelo react todos os componentes\r\nque vão estar dentro desse componente, e assim repassamos normalmente os valores para lá\r\n*/\r\n\r\nexport function AuthProvider({children}){\r\n    return (\r\n        <AuthContext.Provider value={{signed:true, token:'', user:{}}} >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContext;"],"mappings":"AASA,SAASA,aAAT,QAA8B,OAA9B;;AAIA,IAAMC,WAAW,GAAGD,aAAa,CAAC;EAACE,MAAM,EAAC,IAAR;EAAcC,KAAK,EAAC,EAApB;EAAwBC,IAAI,EAAC;AAA7B,CAAD,CAAjC;AAOA,OAAO,SAASC,YAAT,OAAiC;EAAA,IAAVC,QAAU,QAAVA,QAAU;EACpC,OACI,KAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAACJ,MAAM,EAAC,IAAR;MAAcC,KAAK,EAAC,EAApB;MAAwBC,IAAI,EAAC;IAA7B,CAA7B;IAAA,UACKE;EADL,EADJ;AAKH;AAED,eAAeL,WAAf"},"metadata":{},"sourceType":"module"}