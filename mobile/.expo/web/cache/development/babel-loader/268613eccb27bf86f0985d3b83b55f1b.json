{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"../styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction FetchPosts() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      posts = _useState4[0],\n      setPosts = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      postId = _useState6[0],\n      setPostId = _useState6[1];\n\n  useEffect(function () {\n    fetch('http://localhost:3001/posts').then(function (res) {\n      return res.json();\n    }).then(function (result) {\n      setPosts(result);\n      setLoading(false);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  });\n\n  function getPostById(id) {\n    var post = posts.filter(function (post) {\n      return post.id == id;\n    });\n    console.log(post);\n  }\n\n  function display() {\n    if (isLoading) return _jsx(ActivityIndicator, {\n      size: \"large\"\n    });else {\n      return posts.map(function (post) {\n        return _jsxs(View, {\n          style: styles.post_cell,\n          children: [_jsx(Text, {\n            style: styles.titulo,\n            children: post.titulo\n          }), _jsx(Text, {\n            style: styles.conteudo,\n            children: post.conteudo\n          })]\n        });\n      });\n    }\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [display(), _jsx(Button, {\n      title: \"get by id\",\n      onPress: function onPress() {\n        return getPostById(postId);\n      }\n    })]\n  });\n}\n\nexport default FetchPosts;","map":{"version":3,"names":["StatusBar","useEffect","useState","styles","FetchPosts","isLoading","setLoading","posts","setPosts","postId","setPostId","fetch","then","res","json","result","catch","err","console","log","getPostById","id","post","filter","display","map","post_cell","titulo","conteudo","container"],"sources":["C:/expo react/node_mais_reactnative/testes/FetchPosts.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator, Button } from 'react-native';\nimport styles from '../styles'\n\nfunction FetchPosts() {\n\n    /*\n    useStates para o loading do app e os dados do arquivo json.\n    o loading serve apenas para indicar ao usuário que algo está carregando, nesse caso,\n    a requisição do app para pegar o conteúdo do servidor localhost:3001 na rota /cad\n    */\n    const [isLoading, setLoading] = useState(true);\n    const [posts, setPosts] = useState([]);\n    const [postId, setPostId] = useState(0);\n\n    useEffect(()=> {\n        fetch('http://localhost:3001/posts')\n        .then(res => res.json())\n        .then(result => {\n            setPosts(result);\n            setLoading(false);\n        })\n        .catch(err => console.log(err))\n    });\n    \n    function getPostById(id){\n        const post = posts.filter((post)=> post.id == id);\n        console.log(post);\n    }\n\n    function display(){\n        if(isLoading) return <ActivityIndicator size=\"large\"/>\n        else {\n            return posts.map((post)=>{\n                return (\n                    <View style={styles.post_cell} >\n                        <Text style={styles.titulo}>{post.titulo}</Text>\n                        <Text style={styles.conteudo}>{post.conteudo}</Text>\n                    </View>\n                    \n                );\n            })\n        }\n        \n    }\n\n\n    return(\n        <View style={styles.container}>\n            {display()}\n            <Button title='get by id' onPress={()=>getPostById(postId)} />\n        </View>\n        \n    )\n\n\n}\n\nexport default FetchPosts;"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;;;AAEA,OAAOC,MAAP;;;;AAEA,SAASC,UAAT,GAAsB;EAOlB,gBAAgCF,QAAQ,CAAC,IAAD,CAAxC;EAAA;EAAA,IAAOG,SAAP;EAAA,IAAkBC,UAAlB;;EACA,iBAA0BJ,QAAQ,CAAC,EAAD,CAAlC;EAAA;EAAA,IAAOK,KAAP;EAAA,IAAcC,QAAd;;EACA,iBAA4BN,QAAQ,CAAC,CAAD,CAApC;EAAA;EAAA,IAAOO,MAAP;EAAA,IAAeC,SAAf;;EAEAT,SAAS,CAAC,YAAK;IACXU,KAAK,CAAC,6BAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,IAAJ,EAAJ;IAAA,CADT,EAECF,IAFD,CAEM,UAAAG,MAAM,EAAI;MACZP,QAAQ,CAACO,MAAD,CAAR;MACAT,UAAU,CAAC,KAAD,CAAV;IACH,CALD,EAMCU,KAND,CAMO,UAAAC,GAAG;MAAA,OAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;IAAA,CANV;EAOH,CARQ,CAAT;;EAUA,SAASG,WAAT,CAAqBC,EAArB,EAAwB;IACpB,IAAMC,IAAI,GAAGf,KAAK,CAACgB,MAAN,CAAa,UAACD,IAAD;MAAA,OAASA,IAAI,CAACD,EAAL,IAAWA,EAApB;IAAA,CAAb,CAAb;IACAH,OAAO,CAACC,GAAR,CAAYG,IAAZ;EACH;;EAED,SAASE,OAAT,GAAkB;IACd,IAAGnB,SAAH,EAAc,OAAO,KAAC,iBAAD;MAAmB,IAAI,EAAC;IAAxB,EAAP,CAAd,KACK;MACD,OAAOE,KAAK,CAACkB,GAAN,CAAU,UAACH,IAAD,EAAQ;QACrB,OACI,MAAC,IAAD;UAAM,KAAK,EAAEnB,MAAM,CAACuB,SAApB;UAAA,WACI,KAAC,IAAD;YAAM,KAAK,EAAEvB,MAAM,CAACwB,MAApB;YAAA,UAA6BL,IAAI,CAACK;UAAlC,EADJ,EAEI,KAAC,IAAD;YAAM,KAAK,EAAExB,MAAM,CAACyB,QAApB;YAAA,UAA+BN,IAAI,CAACM;UAApC,EAFJ;QAAA,EADJ;MAOH,CARM,CAAP;IASH;EAEJ;;EAGD,OACI,MAAC,IAAD;IAAM,KAAK,EAAEzB,MAAM,CAAC0B,SAApB;IAAA,WACKL,OAAO,EADZ,EAEI,KAAC,MAAD;MAAQ,KAAK,EAAC,WAAd;MAA0B,OAAO,EAAE;QAAA,OAAIJ,WAAW,CAACX,MAAD,CAAf;MAAA;IAAnC,EAFJ;EAAA,EADJ;AASH;;AAED,eAAeL,UAAf"},"metadata":{},"sourceType":"module"}