{"ast":null,"code":"import { React, useContext } from 'react';\nimport AuthRoutes from \"./auth.routes\";\nimport AppRoutes from \"./app.routes\";\nimport AuthContext from \"../contexts/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Routes() {\n  var _useContext = useContext(AuthContext),\n      isSigned = _useContext.isSigned;\n\n  return isSigned ? _jsx(AppRoutes, {}) : _jsx(AuthRoutes, {});\n}","map":{"version":3,"names":["React","useContext","AuthRoutes","AppRoutes","AuthContext","Routes","isSigned"],"sources":["C:/expo react/mundo/src/routes/index.routes.js"],"sourcesContent":["import { React, useContext } from 'react';\r\nimport AuthRoutes from './auth.routes';\r\nimport AppRoutes from './app.routes';\r\n\r\nimport AuthContext from '../contexts/auth';\r\n\r\nexport default function Routes(){\r\n\r\n    const { isSigned } = useContext(AuthContext);\r\n\r\n    /*\r\n    A boolean isSigned determina qual rota vamos utilizar, basicamente:\r\n    Se o usuario estiver logado (signed = true) a rota é AppRoutes,\r\n    senão (signed = false) a rota é AuthRoutes\r\n\r\n    (Assim não precisamos ter a dor de cabeça de conseguir passar para a\r\n    função login o navigation, salvar o navigation num context, etc.\r\n    \r\n    Além de ser muito mais clean, visível e profissional)\r\n    */\r\n\r\n    return isSigned? <AppRoutes/> : <AuthRoutes/> ;\r\n}"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,UAAP;AACA,OAAOC,SAAP;AAEA,OAAOC,WAAP;;AAEA,eAAe,SAASC,MAAT,GAAiB;EAE5B,kBAAqBJ,UAAU,CAACG,WAAD,CAA/B;EAAA,IAAQE,QAAR,eAAQA,QAAR;;EAaA,OAAOA,QAAQ,GAAE,KAAC,SAAD,KAAF,GAAiB,KAAC,UAAD,KAAhC;AACH"},"metadata":{},"sourceType":"module"}