{"ast":null,"code":"import mergeOptions from 'merge-options';\nvar merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nfunction mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n\n  if (oldValue) {\n    var oldObject = JSON.parse(oldValue);\n    var newObject = JSON.parse(value);\n    var nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var _processResult;\n\n    var value = (_processResult = processResult === null || processResult === void 0 ? void 0 : processResult(result)) !== null && _processResult !== void 0 ? _processResult : null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\n\nvar AsyncStorage = {\n  getItem: function getItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.getItem(key);\n    }, callback);\n  },\n  setItem: function setItem(key, value, callback) {\n    return createPromise(function () {\n      return window.localStorage.setItem(key, value);\n    }, callback);\n  },\n  removeItem: function removeItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  },\n  mergeItem: function mergeItem(key, value, callback) {\n    return createPromise(function () {\n      return mergeLocalStorageItem(key, value);\n    }, callback);\n  },\n  clear: function clear(callback) {\n    return createPromise(function () {\n      return window.localStorage.clear();\n    }, callback);\n  },\n  getAllKeys: function getAllKeys(callback) {\n    return createPromise(function () {\n      var numberOfKeys = window.localStorage.length;\n      var keys = [];\n\n      for (var i = 0; i < numberOfKeys; i += 1) {\n        var key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n\n      return keys;\n    }, callback);\n  },\n  flushGetRequests: function flushGetRequests() {\n    return undefined;\n  },\n  multiGet: function multiGet(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.getItem(key);\n    });\n\n    var processResult = function processResult(result) {\n      return result.map(function (value, i) {\n        return [keys[i], value];\n      });\n    };\n\n    return createPromiseAll(promises, callback, processResult);\n  },\n  multiSet: function multiSet(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.setItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiRemove: function multiRemove(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.removeItem(key);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiMerge: function multiMerge(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.mergeItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.ts"],"names":["merge","concatArrays","ignoreUndefined","oldValue","window","oldObject","JSON","newObject","nextValue","value","getValue","callback","resolve","reject","result","processResult","Promise","errors","AsyncStorage","getItem","createPromise","setItem","removeItem","mergeItem","mergeLocalStorageItem","clear","getAllKeys","numberOfKeys","keys","i","key","flushGetRequests","multiGet","promises","createPromiseAll","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.mergeItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"]},"metadata":{},"sourceType":"module"}